server {
  listen 80;
  
  # Reverse Proxy to prevent hardcoding Cluster IP in the fetch calls
  # we send a request to ourselves (the server serving the react app) and then this config forwards it to another address
  # note the TRAILING SLASHES on the routes - this is required to ensure correct forwarding
  location /api/ {
    # dedicated config for requests to this path /api
    # in the src code for react app you change your request to go to `/api/tasks` etc. 
    proxy_pass http://tasks-service.default:8000/; # this evaluates to the Cluster IP to tasks pod in k8s.  If not listening on port 80, then you need to add the specific port (this service listens on port 8000)
    # Note that this configuration is parsed and runs in the container inside of the cluster unlike the React app which runs in the browser
    # so we can use cluster internal ip addresses provided by k8s CoreDNS
  }
  
  # all other requests use this config which serves the React app
  location / {
    root /usr/share/nginx/html;
    index index.html index.htm;
    try_files $uri $uri/ /index.html =404;
  }

  include /etc/nginx/extra-conf.d/*.conf;
}
